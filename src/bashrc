# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# disable annoying bell
# setterm -blength 0
# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# for some reason, this is required to actually enable auto complete
# (idk what the default behavior is, but it sho ain't TAB auto complete!)
bind "TAB:menu-complete"
bind "set completion-ignore-case on"

# vim style
set -o vi

cname="$(tput setf 3)"
csgn="$(tput setf 4)"
chost="$(tput setf 2)"
cw="$(tput setf 6)"
crst="$(tput sgr 0)"

# PS1 with blue bg, white fg on working directory
# PS1='\[\033[1;36m\]\u\[\033[1;31m\]@\[\033[1;32m\]\h:\[\033[1;35m\]\w\[\033[1;31m\]\$\[\033[0m\] '
# PS1='\[\033[1;36m\]\u\[\033[1;31m\]@\[\033[1;32m\]\h:\[\033[1;35m\]\w\[\033[1;31m\]\$\[\033m\] '
# PS1='\[\033[1;36m\]\u\[\033[1;31m\]@\[\033[1;32m\]\h:\[\033[1;35m\]\w\[\031m\]\$\[\033[0m\] '

# LS_COLORS="$LS_COLORS:di=1;44:fi=94:*.cpp=37"
LS_COLORS="$LS_COLORS:di=38;5;141;48;5;234:fi=94:*.h=38;5;039:*.cpp=38;5;024:*.py=38;5;041:*.txt=38;5;251"

function goto() {
		  case $1 in
			  analysis)
				  #declare tools_dir="$(dirname "${BASH_SOURCE[0]}")"
				  #echo $tools_dir
				  #cd "${tools_dir}/../src/server/sparkd/cmds/spartan/analysis"
				  pushd "/home/john/repos/spartan/src/server/sparkd/cmds/spartan/analysis" >/dev/null
				  ;;
			  *)
				  ;;
		  esac
}

# if [ -d "/etc/bash_completion.d" ] && [ -f "/home/john/.complete/sparkd_prompt" ] && ([ ! -f "/etc/bash_completion.d/sparkd_prompt" ] && [ ! -L "/etc/bash_completion.d/sparkd_prompt" ]); then
	#ln -s "/home/john/.complete/sparkd_prompt" "/etc/bash_completion.d/sparkd_prompt"
# fi

# compgen -W sparkd "spartan sql"

# compgen -W "

# complete -F sparkd sparkd_prompt

export HISTTIMEFORMAT="%d/%m/%y %T "
#export PS1="\[\e[1;32m\]\u@\h\[\e[0m\]\[\033[1m\]\[\033[41m\] PRODUCTION \[\033[0m\]:\w$ "
export PS1="\[\e[1;34m\]\h\[\e[0m\]:\w$ "
export PATH="$PATH:/home/bts/bin:/home/john/.tools:/home/john/repos/spartan/tools:/home/john/repos/spartan/build/ninja_release/server"
export PATH="$PATH:/home/john/repos/spartan/tools"
#export PATH="$PATH:/home/bts/bin:/home/john/.tools"

# sparkd autocomplete (bc its fuckin' sweet)
source "/home/john/.complete/sparkd.bash"
# source "/home/john/.complete/spartan-dev.bash"
# alias to . spartan-dev so changes to working dir persist
# alias spartan-dev=". spartan-dev"

# color schemes
# current fav
# export PS1="\e[1;30m\u\e[m@\e[0;33m\h\e[m:\e[33\w\e[m$ "
# blue bg, white fg on working dir
# export PS1="\e[1;30m\u\e[m@\e[0;33m\h\e[m:\e[1;00;44m\w\e[m$ "
# classic gray@yellow (dark)
# \e[1;30m\u\e[m@\e[0;33m\h\e[m:\e[33\w\e[m$

# not sure wtf is up w/ this guy
# export PS1="\u@\h:\w\[$(tput sgr0)\]\$"
# Notes on the escape characters:
#   * \[       begin sequence of non-printing characters
#   * \]       end sequence of non-printing characters
#              (not sure exactly why these are required, apparently
#               it "helps readline keep track of the cursor position")
# 	 * \e[      begin color scheme
#   * x;x;xm   define color scheme (each x is an optional color attr)
# 	 * \e[m     end color scheme
#   * 
#export PS1='\e[38;5;117m\u\e[m@\h$ '
# export PS1='\[\e[38;5;117m\]\u\e[m@\h$ '

# Pastel Delight (lol), with a tropical twist 
#export PS1='\[\e[38;5;117m\]\u\e[m\[\e[37m\]@\e[m\[\e[38;5;119m\]\h\e[m:\[\e[38;5;249m\]\w\e[m$ '
export PS1='\[\e[38;5;242m\]\u\[\e[m\e[37m\]@\[\e[m\]\[\e[38;5;226m\]\h\[\e[m\]:\[\e[38;5;099m\]\w\[\e[m\]$ '

#export PS1="\e[3;34m[\u@\h:\w]\[e$"
#export PS1="\e[45;1;34m\u@\H:\W\e$"

# Uncomment below if conda is installed
# # >>> conda initialize >>W>
# # !! Contents within this block are managed by 'conda init' !!
# __conda_setup="$('/home/john/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
# if [ $? -eq 0 ]; then
#     eval "$__conda_setup"
# else
#     if [ -f "/home/john/anaconda3/etc/profile.d/conda.sh" ]; then
#         . "/home/john/anaconda3/etc/profile.d/conda.sh"
#     else
#         export PATH="/home/john/anaconda3/bin:$PATH"
#     fi
# fi
# unset __conda_setup
# # <<< conda initialize <<<
